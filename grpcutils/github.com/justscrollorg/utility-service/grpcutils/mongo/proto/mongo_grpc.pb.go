// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: mongo/proto/mongo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MongoService_ListDatabases_FullMethodName   = "/mongo.MongoService/ListDatabases"
	MongoService_ListCollections_FullMethodName = "/mongo.MongoService/ListCollections"
	MongoService_InsertDocument_FullMethodName  = "/mongo.MongoService/InsertDocument"
	MongoService_FindDocuments_FullMethodName   = "/mongo.MongoService/FindDocuments"
	MongoService_UpdateDocument_FullMethodName  = "/mongo.MongoService/UpdateDocument"
	MongoService_DeleteDocument_FullMethodName  = "/mongo.MongoService/DeleteDocument"
	MongoService_InsertMany_FullMethodName      = "/mongo.MongoService/InsertMany"
	MongoService_DeleteMany_FullMethodName      = "/mongo.MongoService/DeleteMany"
	MongoService_CountDocuments_FullMethodName  = "/mongo.MongoService/CountDocuments"
)

// MongoServiceClient is the client API for MongoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MongoDB CRUD service definition
type MongoServiceClient interface {
	// Database operations
	ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error)
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
	// CRUD operations
	InsertDocument(ctx context.Context, in *InsertDocumentRequest, opts ...grpc.CallOption) (*InsertDocumentResponse, error)
	FindDocuments(ctx context.Context, in *FindDocumentsRequest, opts ...grpc.CallOption) (*FindDocumentsResponse, error)
	UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error)
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error)
	// Bulk operations
	InsertMany(ctx context.Context, in *InsertManyRequest, opts ...grpc.CallOption) (*InsertManyResponse, error)
	DeleteMany(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeleteManyResponse, error)
	// Aggregation
	CountDocuments(ctx context.Context, in *CountDocumentsRequest, opts ...grpc.CallOption) (*CountDocumentsResponse, error)
}

type mongoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoServiceClient(cc grpc.ClientConnInterface) MongoServiceClient {
	return &mongoServiceClient{cc}
}

func (c *mongoServiceClient) ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatabasesResponse)
	err := c.cc.Invoke(ctx, MongoService_ListDatabases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, MongoService_ListCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) InsertDocument(ctx context.Context, in *InsertDocumentRequest, opts ...grpc.CallOption) (*InsertDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertDocumentResponse)
	err := c.cc.Invoke(ctx, MongoService_InsertDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) FindDocuments(ctx context.Context, in *FindDocumentsRequest, opts ...grpc.CallOption) (*FindDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindDocumentsResponse)
	err := c.cc.Invoke(ctx, MongoService_FindDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDocumentResponse)
	err := c.cc.Invoke(ctx, MongoService_UpdateDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDocumentResponse)
	err := c.cc.Invoke(ctx, MongoService_DeleteDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) InsertMany(ctx context.Context, in *InsertManyRequest, opts ...grpc.CallOption) (*InsertManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertManyResponse)
	err := c.cc.Invoke(ctx, MongoService_InsertMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) DeleteMany(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeleteManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteManyResponse)
	err := c.cc.Invoke(ctx, MongoService_DeleteMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) CountDocuments(ctx context.Context, in *CountDocumentsRequest, opts ...grpc.CallOption) (*CountDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountDocumentsResponse)
	err := c.cc.Invoke(ctx, MongoService_CountDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoServiceServer is the server API for MongoService service.
// All implementations must embed UnimplementedMongoServiceServer
// for forward compatibility.
//
// MongoDB CRUD service definition
type MongoServiceServer interface {
	// Database operations
	ListDatabases(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error)
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	// CRUD operations
	InsertDocument(context.Context, *InsertDocumentRequest) (*InsertDocumentResponse, error)
	FindDocuments(context.Context, *FindDocumentsRequest) (*FindDocumentsResponse, error)
	UpdateDocument(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error)
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)
	// Bulk operations
	InsertMany(context.Context, *InsertManyRequest) (*InsertManyResponse, error)
	DeleteMany(context.Context, *DeleteManyRequest) (*DeleteManyResponse, error)
	// Aggregation
	CountDocuments(context.Context, *CountDocumentsRequest) (*CountDocumentsResponse, error)
	mustEmbedUnimplementedMongoServiceServer()
}

// UnimplementedMongoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMongoServiceServer struct{}

func (UnimplementedMongoServiceServer) ListDatabases(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabases not implemented")
}
func (UnimplementedMongoServiceServer) ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (UnimplementedMongoServiceServer) InsertDocument(context.Context, *InsertDocumentRequest) (*InsertDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDocument not implemented")
}
func (UnimplementedMongoServiceServer) FindDocuments(context.Context, *FindDocumentsRequest) (*FindDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDocuments not implemented")
}
func (UnimplementedMongoServiceServer) UpdateDocument(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedMongoServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedMongoServiceServer) InsertMany(context.Context, *InsertManyRequest) (*InsertManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertMany not implemented")
}
func (UnimplementedMongoServiceServer) DeleteMany(context.Context, *DeleteManyRequest) (*DeleteManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMany not implemented")
}
func (UnimplementedMongoServiceServer) CountDocuments(context.Context, *CountDocumentsRequest) (*CountDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDocuments not implemented")
}
func (UnimplementedMongoServiceServer) mustEmbedUnimplementedMongoServiceServer() {}
func (UnimplementedMongoServiceServer) testEmbeddedByValue()                      {}

// UnsafeMongoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoServiceServer will
// result in compilation errors.
type UnsafeMongoServiceServer interface {
	mustEmbedUnimplementedMongoServiceServer()
}

func RegisterMongoServiceServer(s grpc.ServiceRegistrar, srv MongoServiceServer) {
	// If the following call pancis, it indicates UnimplementedMongoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MongoService_ServiceDesc, srv)
}

func _MongoService_ListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).ListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoService_ListDatabases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).ListDatabases(ctx, req.(*ListDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoService_ListCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_InsertDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).InsertDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoService_InsertDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).InsertDocument(ctx, req.(*InsertDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_FindDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).FindDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoService_FindDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).FindDocuments(ctx, req.(*FindDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoService_UpdateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).UpdateDocument(ctx, req.(*UpdateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_InsertMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).InsertMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoService_InsertMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).InsertMany(ctx, req.(*InsertManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_DeleteMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).DeleteMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoService_DeleteMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).DeleteMany(ctx, req.(*DeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_CountDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).CountDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoService_CountDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).CountDocuments(ctx, req.(*CountDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoService_ServiceDesc is the grpc.ServiceDesc for MongoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mongo.MongoService",
	HandlerType: (*MongoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDatabases",
			Handler:    _MongoService_ListDatabases_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _MongoService_ListCollections_Handler,
		},
		{
			MethodName: "InsertDocument",
			Handler:    _MongoService_InsertDocument_Handler,
		},
		{
			MethodName: "FindDocuments",
			Handler:    _MongoService_FindDocuments_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _MongoService_UpdateDocument_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _MongoService_DeleteDocument_Handler,
		},
		{
			MethodName: "InsertMany",
			Handler:    _MongoService_InsertMany_Handler,
		},
		{
			MethodName: "DeleteMany",
			Handler:    _MongoService_DeleteMany_Handler,
		},
		{
			MethodName: "CountDocuments",
			Handler:    _MongoService_CountDocuments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongo/proto/mongo.proto",
}
