---
# Complete Kafka Stack - Single YAML Deployment
# This file contains everything needed for a production-ready Kafka cluster
# Components: Namespace, Zookeeper, Kafka, Kafka UI, and optional Schema Registry

apiVersion: v1
kind: Namespace
metadata:
  name: kafka
  labels:
    name: kafka
    environment: production
---
# Zookeeper StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: kafka
  labels:
    app: zookeeper
    component: zookeeper
spec:
  serviceName: zookeeper
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
        component: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.5.0
        ports:
        - containerPort: 2181
          name: client
        env:
        - name: ZOOKEEPER_SERVER_ID
          value: "1"
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        resources:
          requests:
            memory: "512Mi"
            cpu: "0.25"
          limits:
            memory: "1Gi"
            cpu: "0.5"
        volumeMounts:
        - name: data
          mountPath: /var/lib/zookeeper
        readinessProbe:
          tcpSocket:
            port: 2181
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 2181
          initialDelaySeconds: 60
          periodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: kafka
  labels:
    app: zookeeper
spec:
  ports:
  - port: 2181
    name: client
  clusterIP: None
  selector:
    app: zookeeper
---
# Kafka StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kafka
  labels:
    app: kafka
    component: broker
spec:
  serviceName: kafka
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
        component: broker
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.5.0
        ports:
        - containerPort: 9092
          name: kafka
        env:
        - name: KAFKA_BROKER_ID
          value: "0"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://:9092"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-0.kafka:9092"
        - name: KAFKA_LOG_DIRS
          value: "/kafka-logs"
        - name: KAFKA_NUM_PARTITIONS
          value: "1"
        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_MIN_INSYNC_REPLICAS
          value: "1"
        - name: KAFKA_LOG_RETENTION_HOURS
          value: "168"
        - name: KAFKA_COMPRESSION_TYPE
          value: "snappy"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
          value: "0"
        resources:
          requests:
            memory: "1Gi"
            cpu: "0.5"
          limits:
            memory: "2Gi"
            cpu: "1"
        volumeMounts:
        - name: data
          mountPath: /kafka-logs
        readinessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 60
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 90
          periodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: kafka
  labels:
    app: kafka
spec:
  ports:
  - port: 9092
    name: kafka
  clusterIP: None
  selector:
    app: kafka
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: kafka
  labels:
    app: kafka
spec:
  ports:
  - port: 9092
    name: kafka
    targetPort: 9092
  selector:
    app: kafka
  type: ClusterIP
---
# Kafka UI for Management
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui
  namespace: kafka
  labels:
    app: kafka-ui
    component: management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
        component: management
    spec:
      containers:
      - name: kafka-ui
        image: provectuslabs/kafka-ui:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: KAFKA_CLUSTERS_0_NAME
          value: "production-cluster"
        - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
          value: "kafka-service:9092"
        - name: KAFKA_CLUSTERS_0_ZOOKEEPER
          value: "zookeeper:2181"
        - name: AUTH_TYPE
          value: "DISABLED"
        - name: MANAGEMENT_HEALTH_LDAP_ENABLED
          value: "false"
        resources:
          requests:
            memory: "512Mi"
            cpu: "0.25"
          limits:
            memory: "1Gi"
            cpu: "0.5"
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-ui
  namespace: kafka
  labels:
    app: kafka-ui
spec:
  selector:
    app: kafka-ui
  ports:
  - port: 8080
    name: http
    targetPort: 8080
    nodePort: 30080
  type: NodePort
---
# Optional: Schema Registry (Commented out for now)
# Uncomment and adjust when needed for advanced use cases
#
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: schema-registry
#   namespace: kafka
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: schema-registry
#   template:
#     metadata:
#       labels:
#         app: schema-registry
#     spec:
#       containers:
#       - name: schema-registry
#         image: confluentinc/cp-schema-registry:7.5.0
#         ports:
#         - containerPort: 8081
#         env:
#         - name: SCHEMA_REGISTRY_HOST_NAME
#           value: "schema-registry"
#         - name: SCHEMA_REGISTRY_LISTENERS
#           value: "http://0.0.0.0:8081"
#         - name: SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS
#           value: "kafka-service:9092"
#         - name: SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR
#           value: "1"
#         resources:
#           requests:
#             memory: "512Mi"
#             cpu: "0.25"
#           limits:
#             memory: "1Gi"
#             cpu: "0.5"
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: schema-registry
#   namespace: kafka
# spec:
#   selector:
#     app: schema-registry
#   ports:
#   - port: 8081
#     targetPort: 8081
#   type: ClusterIP
